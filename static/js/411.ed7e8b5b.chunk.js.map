{"version":3,"file":"static/js/411.ed7e8b5b.chunk.js","mappings":"6JAGe,SAASA,IACtB,MAAMC,EAAOC,IAETC,EAAAA,EAAAA,KAAA,MACEC,MAAM,MACNC,UAAS,8EAAgFC,SAExFJ,IAIDK,EAAMA,CAACC,EAAMC,KAEfC,EAAAA,EAAAA,MAAA,MAAIL,UAAS,iDAAmDC,SAAA,CAC7DE,EACAC,MAIAE,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAQC,IAAaJ,EAAAA,EAAAA,UAC1B,8DAEiBK,EAAAA,OAAaF,GAuBhC,OArBAG,EAAAA,EAAAA,YAAU,KACUC,WAChBR,GAAW,GACX,IACE,MAAMS,QAAiBC,MAAMN,GAC7B,IAAKK,EAASE,GACZ,MAAM,IAAIC,MAAM,+BAElB,MAAMhB,QAAaa,EAASI,OAC5BV,EAAWP,GACXkB,QAAQC,IAAI,CAAEnB,QAChB,CAAE,MAAOoB,GACPF,QAAQE,MAAM,wBAAyBA,EACzC,CAAC,QACChB,GAAW,EACb,GAGFiB,EAAW,GACV,CAACb,IAEAL,GAEAR,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mDAAkDC,UAC/DH,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAACC,KAAM,IAAKC,MAAM,eAMjC7B,EAAAA,EAAAA,KAAA,OAAKE,UAAU,GAAEC,UACfH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iBAAgBC,UAC7BH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kBAAiBC,UAC9BH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kBAAiBC,UAC9BH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mDAAkDC,UAC/DI,EAAAA,EAAAA,MAAA,SAAOL,UAAU,8CAA6CC,SAAA,EAE5DH,EAAAA,EAAAA,KAAA,SAAOE,UAAU,eAAcC,UAC7BI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,CACGL,EAAI,UACJA,EAAI,eACJA,EAAI,SACJA,EAAI,OACJA,EAAI,WACJA,EAAI,SACJA,EAAI,iBAGTE,EAAAA,EAAAA,KAAA,SAAAG,SACGQ,EAAQmB,KAAI,CAACC,EAAKC,KACjBzB,EAAAA,EAAAA,MAAA,MAAgBL,UAAU,uBAAsBC,SAAA,CAC7CC,EAAI2B,EAAIE,QACR7B,EAAI2B,EAAIG,aACR9B,EAAI2B,EAAII,OACR/B,EAAI2B,EAAIK,KACRhC,EAAI2B,EAAIM,SACRjC,EAAIkC,WAAWP,EAAIQ,OAAOC,QAAQ,GAAI,KACtCpC,EAAI2B,EAAIU,WAPFT,mBAkB7B,C","sources":["Components/Content/NavPage/DiamondPrice.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { RingLoader } from \"react-spinners\";\n\nexport default function DiamondPrice() {\n  const col = (title) => {\n    return (\n      <th\n        scope=\"col\"\n        className={`text-xs text-black font-medium px-6 py-3 text-left uppercase tracking-wider`}\n      >\n        {title}\n      </th>\n    );\n  };\n  const row = (data, unit) => {\n    return (\n      <td className={`text-sm text-black px-6 py-4 whitespace-nowrap`}>\n        {data}\n        {unit}\n      </td>\n    );\n  };\n  const [loading, setLoading] = useState(true);\n  const [gemData, setGemData] = useState([]);\n  const [apiUrl, setApiUrl] = useState(\n    \"https://localhost:7292/api/GemPriceList/FilterGemPriceList\"\n  );\n  const prevApiUrl = React.useRef(apiUrl);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setGemData(data);\n        console.log({ data });\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl]);\n\n  if (loading) {\n    return (\n      <div className=\"w-full h-[80vh] flex justify-center items-center\">\n        <RingLoader size={100} color=\"#54cc26\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"\">\n      <div className=\"flex flex-col \">\n        <div className=\"overflow-x-auto\">\n          <div className=\"py-2 min-w-full\">\n            <div className=\"overflow-hidden flex justify-center items-center\">\n              <table className=\"w-[90vw] table-auto border border-green-700\">\n                {/* Cols */}\n                <thead className=\"bg-green-200\">\n                  <tr>\n                    {col(\"Origin\")}\n                    {col(\"CaratWeight\")}\n                    {col(\"Color\")}\n                    {col(\"Cut\")}\n                    {col(\"Clarity\")}\n                    {col(\"Price\")}\n                    {col(\"EffDate\")}\n                  </tr>\n                </thead>\n                <tbody>\n                  {gemData.map((gem, index) => (\n                    <tr key={index} className=\"bg-green-50 border-b\">\n                      {row(gem.Origin)}\n                      {row(gem.CaratWeight)}\n                      {row(gem.Color)}\n                      {row(gem.Cut)}\n                      {row(gem.Clarity)}\n                      {row(parseFloat(gem.Price).toFixed(2), \"$\")}\n                      {row(gem.EffDate)}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["DiamondPrice","col","title","_jsx","scope","className","children","row","data","unit","_jsxs","loading","setLoading","useState","gemData","setGemData","apiUrl","setApiUrl","React","useEffect","async","response","fetch","ok","Error","json","console","log","error","fetchData","RingLoader","size","color","map","gem","index","Origin","CaratWeight","Color","Cut","Clarity","parseFloat","Price","toFixed","EffDate"],"sourceRoot":""}